# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BadgeDto {
  createdAt: DateTime

  """description of the badge"""
  description: String!
  id: String

  """image of the badge"""
  image: String!

  """message to show after get the badge"""
  message: String!

  """the name of the badge"""
  name: String!
  updatedAt: DateTime
}

input BadgePointInput {
  id: String!
}

type BadgesPageDto {
  data: [BadgeDto!]!
  meta: PageMetaDto!
}

type BalanceDto {
  createdAt: DateTime
  id: String
  points: [PointDto!]!
  score: Int!
  updatedAt: DateTime
}

input BalancePointInput {
  id: String!
}

input CreateBadgeInput {
  """description of the badge"""
  description: String

  """image of the badge"""
  image: String

  """message to show after get the badge"""
  message: String

  """the name of the badge"""
  name: String!

  """badge points"""
  points: [BadgePointInput!]!
}

input CreateDomainInput {
  description: String!
  name: String!
}

input CreateEvaluationInput {
  """User note"""
  note: String

  """Quiz ID"""
  quiz: String!

  """The score of the evaluation"""
  score: Int!

  """Started DateTime"""
  startAt: DateTime

  """Time Spent on the quiz"""
  timeSpent: Int

  """User ID"""
  user: String!
}

input CreateEventInput {
  command: String!
  from: EventUserInput = null
  module: String!
  payload: String = null
  sourceId: String!
  to: EventUserInput = null
}

input CreatePermissionInput {
  description: String!
  name: String!
}

input CreatePointInput {
  """the action to get the point"""
  action: String!

  """description of the point"""
  description: String

  """image of the point"""
  image: String

  """message to show after get the point"""
  message: String

  """action point value"""
  number: Int!
}

input CreatePrivateRequestInput {
  mentee: String!
  mentor: String!
  message: String!
}

input CreateProfileDomainInput {
  id: String!
}

input CreateProfileInput {
  canOffer: String
  city: String
  coachingDomains: [CreateProfileDomainInput!]
  coachingType: String
  company: String
  country: String
  currentPost: String
  domainExpertise: [String!]
  firstName: String
  hoursPerMonth: String
  lastName: String
  linkedin: String
  phoneNumber: String
  picture: String
  professionalBg: String
  sector: String
  selfDescription: String
  wantedDomain: CreateProfileDomainInput
  website: String
  whyNeedCoaching: String
  yearsOfExperience: Int
}

input CreatePublicRequestInput {
  expectations: String!
  mentee: String!
  whyNeedCoaching: String!
}

input CreateQuestionInput {
  """Description of the question"""
  description: String

  """Duration of the question on seconds"""
  duration: Int

  """Image of the question"""
  image: String

  """Order of the question"""
  order: Int!

  """Propositions of the question"""
  propositions: [PropositionInput!]!

  """Title of the question"""
  title: String!

  """Question created by"""
  user: String
}

input CreateQuizInput {
  """Description of the quiz"""
  description: String

  """Duration of the quiz on minutes"""
  duration: Int

  """Date to end the quiz"""
  endAt: DateTime

  """Image of the quiz"""
  image: String

  """Questions IDs"""
  questions: [QuestionQuizInput!]

  """Date to start the quiz"""
  startAt: DateTime

  """Title of the quiz"""
  title: String!

  """Quiz created by"""
  user: String
}

input CreateRequestInput {
  expectations: String
  mentee: String!
  mentor: String
  message: String
  proposition: Boolean
  whyNeedCoaching: String
}

input CreateRoleInput {
  description: String!
  name: String!
  permissions: [RolePermissionInput!]!
}

input CreateSessionInput {
  description: String
  duration: Int
  isFromMentor: Boolean
  isVideoCall: Boolean
  mentee: String!
  mentor: String!
  startDate: String!
  title: String!
}

input CreateSubscriptionInput {
  subscribedTo: SubscriptionUserInput!
  subscriber: SubscriptionUserInput!
}

input CreateUserInput {
  active: Boolean
  email: String!
  isAdmin: Boolean
  password: String
  profile: CreateProfileInput
  provider: String!
  providerId: String
  role: String
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DomainDto {
  createdAt: DateTime
  description: String!
  id: String
  name: String!
  updatedAt: DateTime
}

type DomainsPageDto {
  data: [DomainDto!]!
  meta: PageMetaDto!
}

type EvaluationDto {
  createdAt: DateTime
  id: String

  """User note"""
  note: String

  """Score of the quiz"""
  score: Int!

  """Started Time of the quiz"""
  startAt: DateTime

  """Time spent on quiz"""
  timeSpent: Int
  updatedAt: DateTime
}

type EvaluationsPageDto {
  data: [EvaluationDto!]!
  meta: PageMetaDto!
}

type EventDto {
  command: String
  createdAt: DateTime
  from: UserDto
  id: String
  module: String
  payload: EventPayloadDto
  read: Boolean
  sourceId: String
  to: UserDto
  updatedAt: DateTime
}

type EventPayloadDto {
  createdAt: String
  desciption: String
  isFromMentor: Boolean
  isVideoCall: Boolean
  name: String
  proposition: Boolean
  startDate: String
  status: String
}

input EventUserInput {
  id: String!
}

type EventsPageDto {
  data: [EventDto!]!
  meta: PageMetaDto!
}

type MessageDto {
  createdAt: DateTime
  id: String
  sender: UserDto!
  text: String!
  updatedAt: DateTime
}

type MessagesPageDto {
  data: [MessageDto!]!
  meta: PageMetaDto!
}

type Mutation {
  createBadge(createBadgeInput: CreateBadgeInput!): BadgeDto!
  createDomain(createDomainInput: CreateDomainInput!): DomainDto!
  createEvaluation(createEvaluationInput: CreateEvaluationInput!): EvaluationDto!
  createEvent(createEventInput: CreateEventInput!): EventDto!
  createPermission(createPermissionInput: CreatePermissionInput!): PermissionDto!
  createPoint(createPointInput: CreatePointInput!): PointDto!
  createPrivateRequest(createPrivateRequestInput: CreatePrivateRequestInput!): RequestDto!
  createPublicRequest(createPublicRequestInput: CreatePublicRequestInput!): RequestDto!
  createQuestion(createQuestionInput: CreateQuestionInput!): QuestionDto!
  createQuiz(createQuizInput: CreateQuizInput!): QuizDto!
  createRequest(createRequestInput: CreateRequestInput!): RequestDto!
  createRole(createRoleInput: CreateRoleInput!): RoleDto!
  createSession(createSessionInput: CreateSessionInput!): SessionDto!
  createSubscription(createSubscriptionInput: CreateSubscriptionInput!): UserSubscription!
  createUser(createUserInput: CreateUserInput!): UserDto!
  forgetPassword(email: String!): Boolean!
  removeBadge(id: String!): BadgeDto!
  removeDomain(id: String!): DomainDto!
  removePermission(id: String!): PermissionDto!
  removePoint(id: String!): PointDto!
  removeQuestion(id: String!): QuestionDto!
  removeQuiz(id: String!): QuizDto!
  removeRequest(id: String!): RequestDto!
  removeRole(id: String!): RoleDto!
  removeSession(id: String!): SessionDto!
  removeUser(id: String!): UserDto!
  resetPassword(password: String!): Boolean!
  updateBadge(id: String!, updateBadgeInput: UpdateBadgeInput!): BadgeDto!
  updateBalance(id: String!, updateBalanceInput: UpdateBalanceInput!): BalanceDto!
  updateDomain(id: String!, updateDomainInput: UpdateDomainInput!): DomainDto!
  updateEvent(id: String!, updateEventInput: UpdateEventInput!): EventDto!
  updatePermission(id: String!, updatePermissionInput: UpdatePermissionInput!): PermissionDto!
  updatePoint(id: String!, updatePointInput: UpdatePointInput!): PointDto!
  updateProfile(id: String!, updateProfileInput: UpdateProfileInput!): ProfileDto!
  updateQuestion(id: String!, updateQuestionInput: UpdateQuestionInput!): QuestionDto!
  updateQuiz(id: String!, updateQuizInput: UpdateQuizInput!): QuizDto!
  updateRequest(id: String!, updateRequestInput: UpdateRequestInput!): RequestDto!
  updateRole(id: String!, updateRoleInput: UpdateRoleInput!): RoleDto!
  updateSession(id: String!, updateSessionInput: UpdateSessionInput!): SessionDto!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): UserDto!
}

type PageMetaDto {
  itemCount: Int!
  page: Int!
  pageCount: Int!
  take: Int!
}

type PermissionDto {
  createdAt: DateTime
  description: String!
  id: String
  name: String!
  updatedAt: DateTime
}

type PermissionsPageDto {
  data: [PermissionDto!]!
  meta: PageMetaDto!
}

type PointDto {
  """the action to get the point"""
  action: String!
  createdAt: DateTime

  """description of the point"""
  description: String!
  id: String

  """image of the point"""
  image: String!

  """message to show after get the point"""
  message: String!

  """action point value"""
  number: Int!
  updatedAt: DateTime
}

type PointsPageDto {
  data: [PointDto!]!
  meta: PageMetaDto!
}

type ProfileDto {
  canOffer: String
  city: String
  coachingDomains: [DomainDto!]
  coachingType: String
  company: String
  country: String
  createdAt: DateTime
  currentPost: String
  domainExpertise: [String!]
  firstName: String
  hoursPerMonth: String
  id: String
  lastName: String
  linkedin: String
  phoneNumber: String
  picture: String
  professionalBg: String
  sector: String
  selfDescription: String
  updatedAt: DateTime
  wantedDomain: DomainDto
  website: String
  whyNeedCoaching: String
  yearsOfExperience: Int
}

type PropositionDto {
  """If proposition is correct or not"""
  correct: Boolean!

  """Proposition description"""
  desciption: String

  """Proposition points value"""
  points: Int!

  """Proposition title"""
  title: String!
}

input PropositionInput {
  """If proposition is correct or not"""
  correct: Boolean!

  """Proposition description"""
  desciption: String

  """Proposition points value"""
  points: Int!

  """Proposition title"""
  title: String!
}

type Query {
  activatedSessions: [SessionDto!]!
  activities(from: String, module: String, order: String = "ASC", page: Int = 1, q: String, take: Int = 2, to: String): EventsPageDto!
  activitiesM2m(from: String, module: String, order: String = "ASC", page: Int = 1, q: String, take: Int = 2, to: String): EventsPageDto!
  badge(id: String!): BadgeDto!
  badges(order: String = "ASC", page: Int = 1, q: String, take: Int = 2): BadgesPageDto!
  canRequest(mentee: String!): Boolean!
  domain(id: String!): DomainDto!
  domains(order: String = "ASC", page: Int = 1, q: String, take: Int = 2): DomainsPageDto!
  emailExists(email: String!): Boolean!
  evaluation(id: String!): EvaluationDto!
  evaluations(order: String = "ASC", page: Int = 1, q: String, take: Int = 2): EvaluationsPageDto!
  events(from: String, module: String, order: String = "ASC", page: Int = 1, q: String, take: Int = 2, to: String): EventsPageDto!
  menteePublicRequest(mentee: String!, mentor: String, order: String = "ASC", page: Int = 1, proposition: Boolean, q: String, status: String, take: Int = 2): RequestDto
  menteesCount: Int!
  mentorsByDomain(active: Boolean = null, domainId: String!, isAdmin: Boolean = null, order: String = "ASC", page: Int = 1, q: String, status: String = null, take: Int = 2): UsersPageDto!
  messages(order: String = "ASC", page: Int = 1, q: String, room: String!, take: Int = 2): MessagesPageDto!
  messagesNotifications(from: String, module: String, order: String = "ASC", page: Int = 1, q: String, take: Int = 2, to: String): EventsPageDto!
  notifications(from: String, module: String, order: String = "ASC", page: Int = 1, q: String, take: Int = 2, to: String): EventsPageDto!
  permission(id: String!): PermissionDto!
  permissions(order: String = "ASC", page: Int = 1, q: String, take: Int = 2): PermissionsPageDto!
  point(id: String!): PointDto!
  points(order: String = "ASC", page: Int = 1, q: String, take: Int = 2): PointsPageDto!
  profile(id: String!): ProfileDto!
  publicRequests(mentee: String, mentor: String, order: String = "ASC", page: Int = 1, proposition: Boolean, q: String, status: String, take: Int = 2): RequestsPageDto!
  publicRequestsByDomain(domainId: String!, mentee: String, mentor: String, order: String = "ASC", page: Int = 1, proposition: Boolean, q: String, status: String, take: Int = 2): RequestsPageDto!
  question(id: String!): QuestionDto!
  questions(order: String = "ASC", page: Int = 1, q: String, take: Int = 2): QuestionsPageDto!
  quiz(id: String!): QuizDto!
  quizzes(order: String = "ASC", page: Int = 1, q: String, take: Int = 2): QuizzesPageDto!
  request(id: String!): RequestDto!
  requests(mentee: String, mentor: String, order: String = "ASC", page: Int = 1, proposition: Boolean, q: String, status: String, take: Int = 2): RequestsPageDto!
  role(id: String!): RoleDto!
  roles(order: String = "ASC", page: Int = 1, q: String, take: Int = 2): RolesPageDto!
  rolesByNames(rolesNames: [String!]!): [RoleDto!]!
  session(id: String!): SessionDto!
  sessionCalcs: SessionsCalcsDto!
  sessions(order: String = "ASC", page: Int = 1, q: String, status: String, take: Int = 2): SessionsPageDto!
  sessionsNotDue(order: String = "ASC", page: Int = 1, q: String, status: String, take: Int = 2): SessionsPageDto!
  subscribers(id: String!, order: String = "ASC", page: Int = 1, q: String, take: Int = 2): SubscriptionsPageDto!
  subscriptions(id: String!, order: String = "ASC", page: Int = 1, q: String, take: Int = 2): SubscriptionsPageDto!
  suggestMentors(active: Boolean = null, isAdmin: Boolean = null, order: String = "ASC", page: Int = 1, q: String, status: String = null, take: Int = 2): UsersPageDto!
  suggestPublicRequests(mentee: String, mentor: String, order: String = "ASC", page: Int = 1, proposition: Boolean, q: String, status: String, take: Int = 2): RequestsPageDto!
  user(id: String!): UserDto!
  userRequests(id: String!): UserDto!
  users(active: Boolean = null, isAdmin: Boolean = null, order: String = "ASC", page: Int = 1, q: String, status: String = null, take: Int = 2): UsersPageDto!
  usersByRole(active: Boolean = null, id: String!, isAdmin: Boolean = null, order: String = "ASC", page: Int = 1, q: String, status: String = null, take: Int = 2): UsersPageDto!
}

type QuestionDto {
  createdAt: DateTime

  """Description of the question"""
  description: String

  """Duration of the question on seconds"""
  duration: Int
  id: String

  """Description of the question"""
  image: String

  """Order of the question"""
  order: Int!

  """Titile of the question"""
  propositions: [PropositionDto!]!

  """Title of the question"""
  title: String!
  updatedAt: DateTime
}

input QuestionQuizInput {
  """Quiz id"""
  id: String!
}

type QuestionsPageDto {
  data: [QuestionDto!]!
  meta: PageMetaDto!
}

type QuizDto {
  createdAt: DateTime

  """Description of the quiz"""
  description: String

  """Duration of the quiz on minutes"""
  duration: Int

  """Date to end the quiz"""
  endAt: DateTime
  id: String

  """Image of the quiz"""
  image: String

  """Questions of the quiz"""
  questions: [QuestionDto!]

  """Date to start the quiz"""
  startAt: DateTime

  """Title of the quiz"""
  title: String!
  updatedAt: DateTime
}

type QuizzesPageDto {
  data: [QuizDto!]!
  meta: PageMetaDto!
}

type RequestDto {
  createdAt: DateTime
  expectations: String
  id: String
  mentee: UserDto!
  mentor: UserDto
  message: String
  proposition: Boolean
  status: String
  updatedAt: DateTime
  whyNeedCoaching: String
}

type RequestsPageDto {
  data: [RequestDto!]!
  meta: PageMetaDto!
}

type RoleDto {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  updatedAt: DateTime
}

input RolePermissionInput {
  id: String!
}

type RolesPageDto {
  data: [RoleDto!]!
  meta: PageMetaDto!
}

type SessionDto {
  createdAt: DateTime
  description: String
  duration: Int
  id: String
  isFromMentor: Boolean
  isVideoCall: Boolean
  mentee: UserDto
  mentor: UserDto
  startDate: DateTime
  status: String
  title: String
  updatedAt: DateTime
}

type SessionsCalcsDto {
  count: Int!
  durationTotal: Int!
}

type SessionsPageDto {
  data: [SessionDto!]!
  meta: PageMetaDto!
}

type Subscription {
  activity(id: String!): EventDto!
  messageNotification(id: String!): EventDto!
  notification(id: String!): EventDto!
}

input SubscriptionUserInput {
  id: String!
}

type SubscriptionsPageDto {
  data: [UserSubscription!]!
  meta: PageMetaDto!
}

input UpdateBadgeInput {
  """description of the badge"""
  description: String!

  """image of the badge"""
  image: String

  """message to show after get the badge"""
  message: String

  """the name of the badge"""
  name: String

  """badge points"""
  points: [BadgePointInput!]
}

input UpdateBalanceInput {
  points: [BalancePointInput!]!
  score: Int!
}

input UpdateDomainInput {
  description: String!
  name: String!
}

input UpdateEventInput {
  read: String!
}

input UpdatePermissionInput {
  description: String
  name: String
}

input UpdatePointInput {
  """the action to get the point"""
  action: String

  """description of the point"""
  description: String

  """image of the point"""
  image: String

  """message to show after get the point"""
  message: String

  """action point value"""
  number: Int
}

input UpdateProfileInput {
  canOffer: String
  city: String
  coachingDomains: [CreateProfileDomainInput!]
  coachingType: String
  company: String
  country: String
  currentPost: String
  domainExpertise: [String!]
  firstName: String
  hoursPerMonth: String
  lastName: String
  linkedin: String
  phoneNumber: String
  picture: String
  professionalBg: String
  sector: String
  selfDescription: String
  wantedDomain: CreateProfileDomainInput
  website: String
  whyNeedCoaching: String
  yearsOfExperience: Int
}

input UpdateQuestionInput {
  """Description of the question"""
  description: String

  """Duration of the question on seconds"""
  duration: Int

  """Image of the question"""
  image: String

  """Order of the question"""
  order: Int

  """Propositions of the question"""
  propositions: [PropositionInput!]

  """Title of the question"""
  title: String

  """Question created by"""
  user: String
}

input UpdateQuizInput {
  """Description of the quiz"""
  description: String

  """Duration of the quiz on minutes"""
  duration: Int

  """Date to end the quiz"""
  endAt: DateTime

  """Image of the quiz"""
  image: String

  """Questions IDs"""
  questions: [QuestionQuizInput!]

  """Date to start the quiz"""
  startAt: DateTime

  """Title of the quiz"""
  title: String

  """Quiz created by"""
  user: String
}

input UpdateRequestInput {
  expectations: String
  mentee: String
  mentor: String
  message: String
  proposition: Boolean
  status: String
  whyNeedCoaching: String
}

input UpdateRoleInput {
  description: String!
  name: String!
  permissions: [RolePermissionInput!]!
}

input UpdateSessionInput {
  description: String
  duration: Int
  status: String
  title: String
}

input UpdateUserInput {
  active: Boolean
  email: String
  isAdmin: Boolean
  role: String
  status: String
  username: String
}

type UserDto {
  active: Boolean
  createdAt: DateTime
  email: String!
  id: String
  isAdmin: Boolean!
  profile: ProfileDto
  provider: String!
  providerId: String
  role: RoleDto
  status: String
  updatedAt: DateTime
  username: String
}

type UserSubscription {
  createdAt: DateTime
  id: String
  subscribedTo: UserDto!
  subscriber: UserDto!
  updatedAt: DateTime
}

type UsersPageDto {
  data: [UserDto!]!
  meta: PageMetaDto!
}
