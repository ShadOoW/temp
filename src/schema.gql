# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Badge {
  createdAt: DateTime!

  """description of the badge"""
  description: String!
  id: String!

  """image of the badge"""
  image: String!

  """message to show after get the badge"""
  message: String!

  """the name of the badge"""
  name: String!
  updatedAt: DateTime!
}

input BadgePointInput {
  id: String!
}

type Balance {
  createdAt: DateTime!
  id: String!
  score: Int!
  updatedAt: DateTime!
}

input BalancePointInput {
  id: String!
}

input CreateBadgeInput {
  """description of the badge"""
  description: String

  """image of the badge"""
  image: String

  """message to show after get the badge"""
  message: String

  """the name of the badge"""
  name: String!

  """badge points"""
  points: [BadgePointInput!]!
}

input CreateDomainInput {
  description: String!
  name: String!
}

input CreateEvaluationInput {
  """User note"""
  note: String

  """Quiz ID"""
  quiz: String!

  """The score of the evaluation"""
  score: Int!

  """Started DateTime"""
  startAt: DateTime

  """Time Spent on the quiz"""
  timeSpent: Int

  """User ID"""
  user: String!
}

input CreateEventInput {
  command: String!
  from: EventUserInput = null
  module: String!
  payload: String = null
  sourceId: String!
  to: EventUserInput = null
}

input CreatePermissionInput {
  description: String!
  name: String!
}

input CreatePointInput {
  """the action to get the point"""
  action: String!

  """description of the point"""
  description: String

  """image of the point"""
  image: String

  """message to show after get the point"""
  message: String

  """action point value"""
  number: Int!
}

input CreatePrivateRequestInput {
  mentee: String!
  mentor: String!
  message: String!
}

input CreateProfileDomainInput {
  id: String!
}

input CreateProfileInput {
  canOffer: String
  city: String
  coachingDomains: [CreateProfileDomainInput!]!
  coachingType: String
  company: String
  country: String
  currentPost: String
  domainExpertise: String
  firstName: String
  hoursPerMonth: Int
  lastName: String
  linkedin: String
  phoneNumber: String
  picture: String
  professionalBg: String
  sector: String
  selfDescription: String
  wantedDomain: CreateProfileDomainInput
  website: String
  whyNeedCoaching: String
  yearsOfExperience: Int
}

input CreatePublicRequestInput {
  expectations: String!
  mentee: String!
  whyNeedCoaching: String!
}

input CreateQuestionInput {
  """Description of the question"""
  description: String

  """Duration of the question on seconds"""
  duration: Int

  """Image of the question"""
  image: String

  """Order of the question"""
  order: Int!

  """Propositions of the question"""
  propositions: [PropositionInput!]!

  """Title of the question"""
  title: String!

  """Question created by"""
  user: String
}

input CreateQuizInput {
  """Description of the quiz"""
  description: String

  """Duration of the quiz on minutes"""
  duration: Int

  """Date to end the quiz"""
  endAt: DateTime

  """Image of the quiz"""
  image: String

  """Questions IDs"""
  questions: [QuestionQuizInput!]

  """Date to start the quiz"""
  startAt: DateTime

  """Title of the quiz"""
  title: String!

  """Quiz created by"""
  user: String
}

input CreateRequestInput {
  expectations: String
  mentee: String!
  mentor: String
  message: String
  proposition: Boolean
  whyNeedCoaching: String
}

input CreateRoleInput {
  description: String!
  name: String!
  permissions: [RolePermissionInput!]!
}

input CreateSessionInput {
  description: String
  duration: Int
  isFromMentor: Boolean
  isVideoCall: Boolean
  mentee: String!
  mentor: String!
  startDate: String!
  title: String!
}

input CreateSubscriptionInput {
  subscribedTo: SubscriptionUserInput!
  subscriber: SubscriptionUserInput!
}

input CreateUserInput {
  active: Boolean
  email: String!
  isAdmin: Boolean
  password: String
  profile: CreateProfileInput
  provider: String!
  providerId: String
  role: String
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DomainDto {
  description: String!
  name: String!
}

type DomainsPageDto {
  data: [DomainDto!]!
  meta: PageMetaDto!
}

type Evaluation {
  createdAt: DateTime!
  id: String!

  """User note"""
  note: String

  """Score of the quiz"""
  score: Int!

  """Started Time of the quiz"""
  startAt: DateTime

  """Time spent on quiz"""
  timeSpent: Int
  updatedAt: DateTime!
}

type Event {
  command: String!
  createdAt: DateTime!
  from: UserDto!
  id: String!
  module: String!
  payload: String!
  read: Boolean!
  sourceId: String!
  to: UserDto
  updatedAt: DateTime!
}

input EventUserInput {
  id: String!
}

type GetBadges {
  badges: [Badge!]!
  totalCount: Int!
}

type GetEvaluations {
  evaluations: [Evaluation!]!
  totalCount: Int!
}

type GetEventDto {
  command: String!
  from: UserDto!
  module: String!
  payload: String!
  sourceId: String!
  to: UserDto
}

type GetEvents {
  events: [GetEventDto!]!
  totalCount: Int!
}

type GetPoints {
  points: [Point!]!
  totalCount: Int!
}

type GetQuestions {
  questions: [Question!]!
  totalCount: Int!
}

type GetQuizzes {
  quizzes: [Quiz!]!
  totalCount: Int!
}

type GetSessions {
  sessions: [Session!]!
  totalCount: Int!
}

type Mutation {
  createBadge(createBadgeInput: CreateBadgeInput!): Badge!
  createDomain(createDomainInput: CreateDomainInput!): DomainDto!
  createEvaluation(createEvaluationInput: CreateEvaluationInput!): Evaluation!
  createEvent(createEventInput: CreateEventInput!): Event!
  createPermission(createPermissionInput: CreatePermissionInput!): PermissionDto!
  createPoint(createPointInput: CreatePointInput!): Point!
  createPrivateRequest(createPrivateRequestInput: CreatePrivateRequestInput!): RequestDto!
  createPublicRequest(createPublicRequestInput: CreatePublicRequestInput!): RequestDto!
  createQuestion(createQuestionInput: CreateQuestionInput!): Question!
  createQuiz(createQuizInput: CreateQuizInput!): Quiz!
  createRequest(createRequestInput: CreateRequestInput!): RequestDto!
  createRole(createRoleInput: CreateRoleInput!): RoleDto!
  createSession(createSessionInput: CreateSessionInput!): Session!
  createSubscription(createSubscriptionInput: CreateSubscriptionInput!): UserSubscription!
  createUser(createUserInput: CreateUserInput!): UserDto!
  removeBadge(id: String!): Badge!
  removeDomain(id: String!): DomainDto!
  removePermission(id: String!): PermissionDto!
  removePoint(id: String!): Point!
  removeQuestion(id: String!): Question!
  removeQuiz(id: String!): Quiz!
  removeRequest(id: String!): RequestDto!
  removeRole(id: String!): RoleDto!
  removeSession(id: String!): Session!
  removeUser(id: String!): UserDto!
  updateBadge(id: String!, updateBadgeInput: UpdateBadgeInput!): Badge!
  updateBalance(id: String!, updateBalanceInput: UpdateBalanceInput!): Balance!
  updateDomain(id: String!, updateDomainInput: UpdateDomainInput!): DomainDto!
  updateEvent(id: String!, updateEventInput: UpdateEventInput!): Event!
  updatePermission(id: String!, updatePermissionInput: UpdatePermissionInput!): PermissionDto!
  updatePoint(id: String!, updatePointInput: UpdatePointInput!): Point!
  updateProfile(id: String!, updateProfileInput: UpdateProfileInput!): ProfileDto!
  updateQuestion(id: String!, updateQuestionInput: UpdateQuestionInput!): Question!
  updateQuiz(id: String!, updateQuizInput: UpdateQuizInput!): Quiz!
  updateRequest(id: String!, updateRequestInput: UpdateRequestInput!): RequestDto!
  updateRole(id: String!, updateRoleInput: UpdateRoleInput!): RoleDto!
  updateSession(id: String!, updateSessionInput: UpdateSessionInput!): Session!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): UserDto!
}

type PageMetaDto {
  itemCount: Int!
  page: Int!
  pageCount: Int!
  take: Int!
}

type PermissionDto {
  description: String!
  name: String!
}

type PermissionsPageDto {
  data: [PermissionDto!]!
  meta: PageMetaDto!
}

type Point {
  """the action to get the point"""
  action: String!
  createdAt: DateTime!

  """description of the point"""
  description: String!
  id: String!

  """image of the point"""
  image: String!

  """message to show after get the point"""
  message: String!

  """action point value"""
  number: Int!
  updatedAt: DateTime!
}

type ProfileDto {
  canOffer: String
  city: String
  coachingDomains: [DomainDto!]!
  coachingType: String
  company: String
  country: String
  createdAt: DateTime
  currentPost: String
  domainExpertise: String
  firstName: String
  hoursPerMonth: Int
  id: String
  lastName: String
  linkedin: String
  phoneNumber: String
  picture: String
  professionalBg: String
  sector: String
  selfDescription: String
  updatedAt: DateTime
  wantedDomain: DomainDto
  website: String
  whyNeedCoaching: String
  yearsOfExperience: Int
}

type PropositionDto {
  """If proposition is correct or not"""
  correct: Boolean!

  """Proposition description"""
  desciption: String

  """Proposition points value"""
  points: Int!

  """Proposition title"""
  title: String!
}

input PropositionInput {
  """If proposition is correct or not"""
  correct: Boolean!

  """Proposition description"""
  desciption: String

  """Proposition points value"""
  points: Int!

  """Proposition title"""
  title: String!
}

type Query {
  badge(id: String!): Badge!
  badges(skip: Int, take: Int): GetBadges!
  canRequest(mentee: String!): Boolean!
  domain(id: String!): DomainDto!
  domains(order: String = "ASC", page: Int = 1, q: String, take: Int = 10): DomainsPageDto!
  emailExists(email: String!): Boolean!
  evaluation(id: String!): Evaluation!
  evaluations(skip: Int, take: Int): GetEvaluations!
  events(command: String, from: String, module: String, skip: Int, take: Int): GetEvents!
  menteePublicRequest(mentee: String!, mentor: String, order: String = "ASC", page: Int = 1, proposition: Boolean, q: String, status: String, take: Int = 10): RequestsPageDto
  menteeSessions(mentee: String!, skip: Int, status: String, take: Int): GetSessions!
  mentorSessions(mentor: String!, skip: Int, status: String, take: Int): GetSessions!
  notifications(command: String, from: String, id: String!, module: String, skip: Int, take: Int): GetEvents!
  permission(id: String!): PermissionDto!
  permissions(order: String = "ASC", page: Int = 1, q: String, take: Int = 10): PermissionsPageDto!
  point(id: String!): Point!
  points(skip: Int, take: Int): GetPoints!
  profile(id: String!): ProfileDto!
  publicRequests(mentee: String, mentor: String, order: String = "ASC", page: Int = 1, proposition: Boolean, q: String, status: String, take: Int = 10): RequestsPageDto!
  question(id: String!): Question!
  questions(skip: Int, take: Int): GetQuestions!
  quiz(id: String!): Quiz!
  quizzes(skip: Int, take: Int): GetQuizzes!
  request(id: String!): RequestsPageDto!
  requests(mentee: String, mentor: String, order: String = "ASC", page: Int = 1, proposition: Boolean, q: String, status: String, take: Int = 10): RequestsPageDto!
  role(id: String!): RoleDto!
  roles(order: String = "ASC", page: Int = 1, q: String, take: Int = 10): RolesPageDto!
  rolesByNames(rolesNames: [String!]!): RolesPageDto!
  session(id: String!): Session!
  sessions(mentee: String, mentor: String, skip: Int, take: Int): GetSessions!
  sessionsNotDue(skip: Int, status: String, take: Int): GetSessions!
  subscribers(id: String!, order: String = "ASC", page: Int = 1, q: String, take: Int = 10): SubscriptionsPageDto!
  subscriptions(id: String!, order: String = "ASC", page: Int = 1, q: String, take: Int = 10): SubscriptionsPageDto!
  user(id: String!): UserDto!
  userRequests(id: String!): UserDto!
  users(order: String = "ASC", page: Int = 1, q: String, take: Int = 10): UsersPageDto!
  usersByRole(id: String!, order: String = "ASC", page: Int = 1, q: String, take: Int = 10): UsersPageDto!
}

type Question {
  createdAt: DateTime!

  """Description of the question"""
  description: String

  """Duration of the question on seconds"""
  duration: Int
  id: String!

  """Description of the question"""
  image: String

  """Order of the question"""
  order: Int!

  """Titile of the question"""
  propositions: [PropositionDto!]!

  """Title of the question"""
  title: String!
  updatedAt: DateTime!
}

input QuestionQuizInput {
  """Quiz id"""
  id: String!
}

type Quiz {
  createdAt: DateTime!

  """Description of the quiz"""
  description: String

  """Duration of the quiz on minutes"""
  duration: Int

  """Date to end the quiz"""
  endAt: DateTime
  id: String!

  """Image of the quiz"""
  image: String

  """Questions of the quiz"""
  questions: [Question!]

  """Date to start the quiz"""
  startAt: DateTime

  """Title of the quiz"""
  title: String!
  updatedAt: DateTime!
}

type RequestDto {
  createdAt: DateTime
  expectations: String
  id: String
  mentee: UserDto!
  mentor: UserDto
  message: String
  proposition: Boolean
  status: String
  updatedAt: DateTime
  whyNeedCoaching: String
}

type RequestsPageDto {
  data: [RequestDto!]!
  meta: PageMetaDto!
}

type RoleDto {
  createdAt: DateTime
  description: String
  id: String
  name: String!
  updatedAt: DateTime
}

input RolePermissionInput {
  id: String!
}

type RolesPageDto {
  data: [RoleDto!]!
  meta: PageMetaDto!
}

type Session {
  createdAt: DateTime!
  description: String!
  duration: Int!
  id: String!
  isFromMentor: Boolean!
  isVideoCall: Boolean!
  mentee: UserDto!
  mentor: UserDto!
  startDate: DateTime!
  status: String
  title: String!
  updatedAt: DateTime!
}

type Subscription {
  activity: Event!
  notification: Event!
}

input SubscriptionUserInput {
  id: String!
}

type SubscriptionsPageDto {
  data: [UserSubscription!]!
  meta: PageMetaDto!
}

input UpdateBadgeInput {
  """description of the badge"""
  description: String!

  """image of the badge"""
  image: String

  """message to show after get the badge"""
  message: String

  """the name of the badge"""
  name: String

  """badge points"""
  points: [BadgePointInput!]
}

input UpdateBalanceInput {
  points: [BalancePointInput!]!
  score: Int!
}

input UpdateDomainInput {
  description: String!
  name: String!
}

input UpdateEventInput {
  read: String!
}

input UpdatePermissionInput {
  description: String
  name: String
}

input UpdatePointInput {
  """the action to get the point"""
  action: String

  """description of the point"""
  description: String

  """image of the point"""
  image: String

  """message to show after get the point"""
  message: String

  """action point value"""
  number: Int
}

input UpdateProfileInput {
  canOffer: String
  city: String
  coachingDomains: [CreateProfileDomainInput!]!
  coachingType: String
  company: String
  country: String
  currentPost: String
  domainExpertise: String
  firstName: String
  hoursPerMonth: Int
  lastName: String
  linkedin: String
  phoneNumber: String
  picture: String
  professionalBg: String
  sector: String
  selfDescription: String
  wantedDomain: CreateProfileDomainInput
  website: String
  whyNeedCoaching: String
  yearsOfExperience: Int
}

input UpdateQuestionInput {
  """Description of the question"""
  description: String

  """Duration of the question on seconds"""
  duration: Int

  """Image of the question"""
  image: String

  """Order of the question"""
  order: Int

  """Propositions of the question"""
  propositions: [PropositionInput!]

  """Title of the question"""
  title: String

  """Question created by"""
  user: String
}

input UpdateQuizInput {
  """Description of the quiz"""
  description: String

  """Duration of the quiz on minutes"""
  duration: Int

  """Date to end the quiz"""
  endAt: DateTime

  """Image of the quiz"""
  image: String

  """Questions IDs"""
  questions: [QuestionQuizInput!]

  """Date to start the quiz"""
  startAt: DateTime

  """Title of the quiz"""
  title: String

  """Quiz created by"""
  user: String
}

input UpdateRequestInput {
  expectations: String
  mentee: String
  mentor: String
  message: String
  proposition: Boolean
  status: String
  whyNeedCoaching: String
}

input UpdateRoleInput {
  description: String!
  name: String!
  permissions: [RolePermissionInput!]!
}

input UpdateSessionInput {
  description: String
  duration: Int
  status: String
  title: String
}

input UpdateUserInput {
  active: Boolean
  email: String
  isAdmin: Boolean
  role: String
  status: String
  username: String
}

type UserDto {
  active: Boolean
  createdAt: DateTime
  email: String!
  id: String
  isAdmin: Boolean!
  profile: ProfileDto
  provider: String!
  providerId: String
  role: RoleDto
  status: String!
  updatedAt: DateTime
  username: String
}

type UserSubscription {
  subscribedTo: UserDto!
  subscriber: UserDto!
}

type UsersPageDto {
  data: [UserDto!]!
  meta: PageMetaDto!
}
