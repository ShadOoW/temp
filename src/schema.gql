# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Badge {
  createdAt: DateTime!

  """description of the badge"""
  description: String!
  id: String!

  """image of the badge"""
  image: String!

  """message to show after get the badge"""
  message: String!

  """the name of the badge"""
  name: String!
  updatedAt: DateTime!
}

input BadgePointInput {
  id: String!
}

type Balance {
  createdAt: DateTime!
  id: String!
  score: Int!
  updatedAt: DateTime!
}

input BalancePointInput {
  id: String!
}

input CreateBadgeInput {
  """description of the badge"""
  description: String

  """image of the badge"""
  image: String

  """message to show after get the badge"""
  message: String

  """the name of the badge"""
  name: String!

  """badge points"""
  points: [BadgePointInput!]!
}

input CreateDomainInput {
  description: String!
  name: String!
}

input CreateEvaluationInput {
  """User note"""
  note: String

  """Quiz ID"""
  quiz: String!

  """The score of the evaluation"""
  score: Int!

  """Started DateTime"""
  startAt: DateTime

  """Time Spent on the quiz"""
  timeSpent: Int

  """User ID"""
  user: String!
}

input CreateEventInput {
  command: String!
  from: EventUserInput = null
  module: String!
  payload: String = null
  sourceId: String!
  to: EventUserInput = null
}

input CreatePermissionInput {
  description: String!
  name: String!
}

input CreatePointInput {
  """the action to get the point"""
  action: String!

  """description of the point"""
  description: String

  """image of the point"""
  image: String

  """message to show after get the point"""
  message: String

  """action point value"""
  number: Int!
}

input CreatePrivateRequestInput {
  mentee: String!
  mentor: String!
  message: String!
}

input CreateProfileDomainInput {
  id: String!
}

input CreateProfileInput {
  canOffer: String
  city: String
  coachingDomains: [CreateProfileDomainInput!]!
  coachingType: String
  company: String
  country: String
  currentPost: String
  domainExpertise: String
  firstName: String
  hoursPerMonth: Int
  lastName: String
  linkedin: String
  phoneNumber: String
  picture: String
  professionalBg: String
  sector: String
  selfDescription: String
  wantedDomain: CreateProfileDomainInput
  website: String
  whyNeedCoaching: String
  yearsOfExperience: Int
}

input CreatePublicRequestInput {
  expectations: String!
  mentee: String!
  whyNeedCoaching: String!
}

input CreateQuestionInput {
  """Description of the question"""
  description: String

  """Duration of the question on seconds"""
  duration: Int

  """Image of the question"""
  image: String

  """Order of the question"""
  order: Int!

  """Propositions of the question"""
  propositions: [PropositionInput!]!

  """Title of the question"""
  title: String!

  """Question created by"""
  user: String
}

input CreateQuizInput {
  """Description of the quiz"""
  description: String

  """Duration of the quiz on minutes"""
  duration: Int

  """Date to end the quiz"""
  endAt: DateTime

  """Image of the quiz"""
  image: String

  """Questions IDs"""
  questions: [QuestionQuizInput!]

  """Date to start the quiz"""
  startAt: DateTime

  """Title of the quiz"""
  title: String!

  """Quiz created by"""
  user: String
}

input CreateRequestInput {
  expectations: String
  mentee: String!
  mentor: String
  message: String
  proposition: Boolean
  whyNeedCoaching: String
}

input CreateRoleInput {
  description: String!
  name: String!
  permissions: [RolePermissionInput!]!
}

input CreateSessionInput {
  description: Int!
  duration: Int!
  isFromMentor: Boolean!
  isVideoCall: Boolean!
  mentee: String!
  mentor: String!
  startDate: String!
  title: String!
}

input CreateSubscriptionInput {
  subscribedTo: SubscriptionUserInput!
  subscriber: SubscriptionUserInput!
}

input CreateUserInput {
  active: Boolean
  email: String!
  isAdmin: Boolean
  password: String
  profile: CreateProfileInput
  provider: String!
  providerId: String
  role: String
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Domain {
  createdAt: DateTime!
  description: String!
  id: String!
  name: String!
  updatedAt: DateTime!
}

type Evaluation {
  createdAt: DateTime!
  id: String!

  """User note"""
  note: String

  """Score of the quiz"""
  score: Int!

  """Started Time of the quiz"""
  startAt: DateTime

  """Time spent on quiz"""
  timeSpent: Int
  updatedAt: DateTime!
}

type Event {
  command: String!
  createdAt: DateTime!
  from: User!
  id: String!
  module: String!
  payload: String!
  read: Boolean!
  sourceId: String!
  to: User
  updatedAt: DateTime!
}

input EventUserInput {
  id: String!
}

type GetBadges {
  badges: [Badge!]!
  totalCount: Int!
}

type GetDomains {
  domains: [Domain!]!
  totalCount: Int!
}

type GetEvaluations {
  evaluations: [Evaluation!]!
  totalCount: Int!
}

type GetEventDto {
  command: String!
  from: GetUserDto!
  module: String!
  payload: String!
  sourceId: String!
  to: GetUserDto
}

type GetEvents {
  events: [GetEventDto!]!
  totalCount: Int!
}

type GetPermissions {
  permissions: [Permission!]!
  totalCount: Int!
}

type GetPoints {
  points: [Point!]!
  totalCount: Int!
}

type GetQuestions {
  questions: [Question!]!
  totalCount: Int!
}

type GetQuizzes {
  quizzes: [Quiz!]!
  totalCount: Int!
}

type GetRequest {
  createdAt: DateTime!
  expectations: String
  id: String
  mentee: GetUserDto!
  mentor: GetUserDto
  message: String
  proposition: Boolean
  status: String
  updatedAt: DateTime!
  whyNeedCoaching: String
}

type GetRequests {
  requests: [GetRequest!]!
  totalCount: Int!
}

type GetRoles {
  roles: [Role!]!
  totalCount: Int!
}

type GetSessions {
  sessions: [Session!]!
  totalCount: Int!
}

type GetSubscribers {
  subscribers: [UserSubscription!]!
  totalCount: Int!
}

type GetSubscriptions {
  subscriptions: [UserSubscription!]!
  totalCount: Int!
}

type GetUserDto {
  active: Boolean
  email: String
  id: String
  isAdmin: Boolean
  menteeSessions: [Session!]
  mentorSessions: [Session!]
  password: String
  profile: Profile
  provider: String
  providerId: String
  requestsFrom: [Request!]
  requestsTo: [Request!]
  role: Role
  status: String
  subscribers: [UserSubscription!]
  subscriptions: [UserSubscription!]
  username: String
}

type Mutation {
  createBadge(createBadgeInput: CreateBadgeInput!): Badge!
  createDomain(createDomainInput: CreateDomainInput!): Domain!
  createEvaluation(createEvaluationInput: CreateEvaluationInput!): Evaluation!
  createEvent(createEventInput: CreateEventInput!): Event!
  createPermission(createPermissionInput: CreatePermissionInput!): Permission!
  createPoint(createPointInput: CreatePointInput!): Point!
  createPrivateRequest(createPrivateRequestInput: CreatePrivateRequestInput!): Request!
  createPublicRequest(createPublicRequestInput: CreatePublicRequestInput!): Request!
  createQuestion(createQuestionInput: CreateQuestionInput!): Question!
  createQuiz(createQuizInput: CreateQuizInput!): Quiz!
  createRequest(createRequestInput: CreateRequestInput!): Request!
  createRole(createRoleInput: CreateRoleInput!): Role!
  createSession(createSessionInput: CreateSessionInput!): Session!
  createSubscription(createSubscriptionInput: CreateSubscriptionInput!): UserSubscription!
  createUser(createUserInput: CreateUserInput!): User!
  removeBadge(id: String!): Badge!
  removeDomain(id: String!): Domain!
  removePermission(id: String!): Permission!
  removePoint(id: String!): Point!
  removeQuestion(id: String!): Question!
  removeQuiz(id: String!): Quiz!
  removeRequest(id: String!): Request!
  removeRole(id: String!): Role!
  removeSession(id: String!): Session!
  removeSubscription(id: Int!): UserSubscription!
  removeUser(id: String!): User!
  updateBadge(id: String!, updateBadgeInput: UpdateBadgeInput!): Badge!
  updateBalance(id: String!, updateBalanceInput: UpdateBalanceInput!): Balance!
  updateDomain(id: String!, updateDomainInput: UpdateDomainInput!): Domain!
  updateEvent(id: String!, updateEventInput: UpdateEventInput!): Event!
  updatePermission(id: String!, updatePermissionInput: UpdatePermissionInput!): Permission!
  updatePoint(id: String!, updatePointInput: UpdatePointInput!): Point!
  updateProfile(id: String!, updateProfileInput: UpdateProfileInput!): Profile!
  updateQuestion(id: String!, updateQuestionInput: UpdateQuestionInput!): Question!
  updateQuiz(id: String!, updateQuizInput: UpdateQuizInput!): Quiz!
  updateRequest(id: String!, updateRequestInput: UpdateRequestInput!): Request!
  updateRole(id: String!, updateRoleInput: UpdateRoleInput!): Role!
  updateSession(id: String!, updateSessionInput: UpdateSessionInput!): Session!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): User!
}

type Permission {
  createdAt: DateTime!
  description: String!
  id: String!
  name: String!
  updatedAt: DateTime!
}

type Point {
  """the action to get the point"""
  action: String!
  createdAt: DateTime!

  """description of the point"""
  description: String!
  id: String!

  """image of the point"""
  image: String!

  """message to show after get the point"""
  message: String!

  """action point value"""
  number: Int!
  updatedAt: DateTime!
}

type Profile {
  canOffer: String
  city: String
  coachingDomains: [Domain!]!
  coachingType: String
  company: String
  country: String
  createdAt: DateTime!
  currentPost: String
  domainExpertise: String
  firstName: String
  hoursPerMonth: Int
  id: String!
  lastName: String
  linkedin: String
  phoneNumber: String
  picture: String
  professionalBg: String
  sector: String
  selfDescription: String
  updatedAt: DateTime!
  wantedDomain: Domain
  website: String
  whyNeedCoaching: String
  yearsOfExperience: Int
}

type PropositionDto {
  """If proposition is correct or not"""
  correct: Boolean!

  """Proposition description"""
  desciption: String

  """Proposition points value"""
  points: Int!

  """Proposition title"""
  title: String!
}

input PropositionInput {
  """If proposition is correct or not"""
  correct: Boolean!

  """Proposition description"""
  desciption: String

  """Proposition points value"""
  points: Int!

  """Proposition title"""
  title: String!
}

type Query {
  badge(id: String!): Badge!
  badges(skip: Int, take: Int): GetBadges!
  canRequest(mentee: String!): Boolean!
  domain(id: String!): Domain!
  domains(skip: Int, take: Int): GetDomains!
  emailExists(email: String!): Boolean!
  evaluation(id: String!): Evaluation!
  evaluations(skip: Int, take: Int): GetEvaluations!
  events(command: String, from: String, module: String, skip: Int, take: Int): GetEvents!
  menteePublicRequest(mentee: String!, skip: Int, take: Int): GetRequest
  menteeSessions(mentee: String!, skip: Int, take: Int): GetSessions!
  mentorSessions(mentor: String!, skip: Int, take: Int): GetSessions!
  notifications(command: String, from: String, id: String!, module: String, skip: Int, take: Int): GetEvents!
  permission(id: String!): Permission!
  permissions(skip: Int, take: Int): GetPermissions!
  point(id: String!): Point!
  points(skip: Int, take: Int): GetPoints!
  profile(id: String!): Profile!
  publicRequests(skip: Int, take: Int): GetRequests!
  question(id: String!): Question!
  questions(skip: Int, take: Int): GetQuestions!
  quiz(id: String!): Quiz!
  quizzes(skip: Int, take: Int): GetQuizzes!
  request(id: String!): GetRequest!
  requests(mentee: String, mentor: String, proposition: Boolean, skip: Int, status: String, take: Int): GetRequests!
  role(id: String!): Role!
  roles(skip: Int, take: Int): GetRoles!
  rolesByNames(rolesNames: [String!]!): [Role!]!
  session(id: String!): Session!
  sessions(mentee: String, mentor: String, skip: Int, take: Int): GetSessions!
  sessionsNotDue(skip: Int, take: Int): GetSessions!
  subscribers(id: String!, skip: Int, take: Int): GetSubscribers!
  subscriptions(id: String!, skip: Int, take: Int): GetSubscriptions!
  user(id: String!): User!
  userRequests(id: String!): User!
  users: [User!]!
  usersByRole(id: String!): [User!]!
}

type Question {
  createdAt: DateTime!

  """Description of the question"""
  description: String

  """Duration of the question on seconds"""
  duration: Int
  id: String!

  """Description of the question"""
  image: String

  """Order of the question"""
  order: Int!

  """Titile of the question"""
  propositions: [PropositionDto!]!

  """Title of the question"""
  title: String!
  updatedAt: DateTime!
}

input QuestionQuizInput {
  """Quiz id"""
  id: String!
}

type Quiz {
  createdAt: DateTime!

  """Description of the quiz"""
  description: String

  """Duration of the quiz on minutes"""
  duration: Int

  """Date to end the quiz"""
  endAt: DateTime
  id: String!

  """Image of the quiz"""
  image: String

  """Questions of the quiz"""
  questions: [Question!]

  """Date to start the quiz"""
  startAt: DateTime

  """Title of the quiz"""
  title: String!
  updatedAt: DateTime!
}

type Request {
  createdAt: DateTime!
  description: String
  excerpt: String!
  from: User!
  id: String!
  proposition: Boolean
  status: String
  title: String!
  to: User
  updatedAt: DateTime!
}

type Role {
  createdAt: DateTime!
  description: String!
  id: String!
  name: String
  permissions: [Permission!]!
  updatedAt: DateTime!
  users: [User!]!
}

input RolePermissionInput {
  id: String!
}

type Session {
  createdAt: DateTime!
  description: String!
  duration: Int!
  id: String!
  isFromMentor: Boolean!
  isVideoCall: Boolean!
  mentee: User!
  mentor: User!
  startDate: DateTime!
  status: String
  title: String!
  updatedAt: DateTime!
}

type Subscription {
  activity: Event!
  notification: Event!
}

input SubscriptionUserInput {
  id: String!
}

input UpdateBadgeInput {
  """description of the badge"""
  description: String!

  """image of the badge"""
  image: String

  """message to show after get the badge"""
  message: String

  """the name of the badge"""
  name: String

  """badge points"""
  points: [BadgePointInput!]
}

input UpdateBalanceInput {
  points: [BalancePointInput!]!
  score: Int!
}

input UpdateDomainInput {
  description: String!
  name: String!
}

input UpdateEventInput {
  read: String!
}

input UpdatePermissionInput {
  description: String!
  name: String!
}

input UpdatePointInput {
  """the action to get the point"""
  action: String

  """description of the point"""
  description: String

  """image of the point"""
  image: String

  """message to show after get the point"""
  message: String

  """action point value"""
  number: Int
}

input UpdateProfileInput {
  canOffer: String
  city: String
  coachingDomains: [CreateProfileDomainInput!]!
  coachingType: String
  company: String
  country: String
  currentPost: String
  domainExpertise: String
  firstName: String
  hoursPerMonth: Int
  lastName: String
  linkedin: String
  phoneNumber: String
  picture: String
  professionalBg: String
  sector: String
  selfDescription: String
  wantedDomain: CreateProfileDomainInput
  website: String
  whyNeedCoaching: String
  yearsOfExperience: Int
}

input UpdateQuestionInput {
  """Description of the question"""
  description: String

  """Duration of the question on seconds"""
  duration: Int

  """Image of the question"""
  image: String

  """Order of the question"""
  order: Int

  """Propositions of the question"""
  propositions: [PropositionInput!]

  """Title of the question"""
  title: String

  """Question created by"""
  user: String
}

input UpdateQuizInput {
  """Description of the quiz"""
  description: String

  """Duration of the quiz on minutes"""
  duration: Int

  """Date to end the quiz"""
  endAt: DateTime

  """Image of the quiz"""
  image: String

  """Questions IDs"""
  questions: [QuestionQuizInput!]

  """Date to start the quiz"""
  startAt: DateTime

  """Title of the quiz"""
  title: String

  """Quiz created by"""
  user: String
}

input UpdateRequestInput {
  expectations: String
  mentee: String
  mentor: String
  message: String
  proposition: Boolean
  status: String
  whyNeedCoaching: String
}

input UpdateRoleInput {
  description: String!
  name: String!
  permissions: [RolePermissionInput!]!
}

input UpdateSessionInput {
  description: String
  duration: Int!
  status: String
  title: String
}

input UpdateUserInput {
  active: Boolean
  email: String
  isAdmin: Boolean
  role: String
  status: String
  username: String
}

type User {
  active: Boolean
  balance: Balance!
  createdAt: DateTime!
  email: String
  eventsFrom: [Event!]
  eventsTo: [Event!]
  id: String!
  isAdmin: Boolean!
  menteeSessions: [Session!]!
  mentorSessions: [Session!]!
  password: String
  profile: Profile!
  provider: String
  providerId: String
  requestsFrom: [Request!]!
  requestsTo: [Request!]!
  role: Role
  status: String
  subscribers: [UserSubscription!]!
  subscriptions: [UserSubscription!]!
  updatedAt: DateTime!
  username: String
}

type UserSubscription {
  createdAt: DateTime!
  id: String!
  subscribedTo: User!
  subscriber: User!
  updatedAt: DateTime!
}
